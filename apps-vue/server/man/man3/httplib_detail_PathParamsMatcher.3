.TH "httplib::detail::PathParamsMatcher" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
httplib::detail::PathParamsMatcher
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <httplib\&.h>\fP
.PP
Inherits \fBhttplib::detail::MatcherBase\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPathParamsMatcher\fP (const std::string &pattern)"
.br
.ti -1c
.RI "bool \fBmatch\fP (\fBRequest\fP &request) const override"
.br
.in -1c

Public Member Functions inherited from \fBhttplib::detail::MatcherBase\fP
.in +1c
.ti -1c
.RI "\fBMatcherBase\fP (std::string pattern)"
.br
.ti -1c
.RI "const std::string & \fBpattern\fP () const"
.br
.in -1c
.SH "Detailed Description"
.PP 
Captures parameters in request path and stores them in Request::path_params
.PP
Capture name is a substring of a pattern from : to /\&. The rest of the pattern is matched against the request path directly Parameters are captured starting from the next character after the end of the last matched static pattern fragment until the next /\&.
.PP
Example pattern: '/path/fragments/:capture/more/fragments/:second_capture' Static fragments: '/path/fragments/', 'more/fragments/'
.PP
Given the following request path: '/path/fragments/:1/more/fragments/:2' the resulting capture will be {{'capture', '1'}, {'second_capture', '2'}} 
.SH "Member Function Documentation"
.PP 
.SS "bool httplib::detail::PathParamsMatcher::match (\fBRequest\fP & request) const\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Implements \fBhttplib::detail::MatcherBase\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
